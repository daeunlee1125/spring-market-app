<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kr.co.shoply.mapper.MemSellerMapper">

    <insert id="insertMember">
        INSERT INTO MEMBER
        (MEM_ID, MEM_PASS, MEM_NAME, MEM_LEVEL, MEM_STAT, MEM_HP, MEM_ZIP, MEM_ADDR1, MEM_ADDR2, MEM_RDATE, MEM_RANK)
        VALUES
        (#{mem_id}, #{mem_pass}, #{mem_name}, #{mem_level}, #{mem_stat}, #{mem_hp}, #{mem_zip}, #{mem_addr1}, #{mem_addr2}, SYSDATE, #{mem_rank})
    </insert>

    <insert id="insertMemSeller">
        INSERT INTO MEM_SELLER
        (MEM_ID, CORP_NAME, CORP_REG_HP, CORP_TEL_HP, CORP_FAX)
        VALUES
        (#{mem_id}, #{corp_name}, #{corp_reg_hp}, #{corp_tel_hp}, #{corp_fax})
    </insert>

    <select id="getSellers2" resultType="kr.co.shoply.dto.MemSellerDTO">
        SELECT
            mem_id, corp_name, mem_name, corp_reg_hp, corp_tel_hp, mem_hp, mem_stat
        from MEMBER m
        LEFT JOIN mem_seller USING (mem_id)
        WHERE mem_level=2
    </select>



    <select id="getSellerPage2" resultType="kr.co.shoply.dto.MemSellerDTO">
        SELECT
        m.mem_id, corp_name, mem_name, corp_reg_hp, corp_tel_hp, mem_hp, mem_stat
        FROM MEMBER m
        LEFT JOIN mem_seller s ON m.mem_id=s.mem_id
        <include refid="searchWhere2"/>
        OFFSET #{offset} ROWS
        FETCH NEXT #{size} ROWS ONLY
    </select>


    <sql id="searchWhere2">
        <where>
            mem_level=2
            <if test="searchType != null and keyword != ''">
                <choose>
                    <when test="searchType == 'corp_name'">
                        AND corp_name LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'mem_name'">
                        AND mem_name LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'corp_reg_hp'">
                        AND corp_reg_hp LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'mem_hp'">
                        AND mem_hp LIKE '%' || #{keyword} || '%'
                    </when>

                </choose>
            </if>
        </where>
    </sql>

    <select id="selectCountTotal2" resultType="int">
        SELECT COUNT(*) FROM MEMBER m
        LEFT JOIN mem_seller s ON m.mem_id = s.mem_id
        <include refid="searchWhere2"/>
    </select>

    <update id="updateStat2">
        <choose>
            <when test="mem_stat == '운영중'">
                UPDATE member SET mem_stat='운영중지' WHERE mem_id=#{mem_id}
            </when>
            <when test="mem_stat == '운영중지'">
                UPDATE member SET mem_stat='운영준비' WHERE mem_id=#{mem_id}
            </when>
            <when test="mem_stat == '운영준비'">
                UPDATE member SET mem_stat='운영중' WHERE mem_id=#{mem_id}
            </when>
        </choose>
    </update>

    <select id="sellerWithSales" resultType="kr.co.shoply.dto.MemSellerDTO">
        SELECT
        s.corp_name,
        s.corp_reg_hp,
        COUNT(DISTINCT i.ord_no) AS ord_cnt,
        COUNT(DISTINCT CASE WHEN o.ord_stat = 2 THEN i.ord_no END) AS ord_st_cnt,
        COUNT(CASE WHEN i.item_stat = 2 THEN 1 END) AS stat2_cnt,
        COUNT(CASE WHEN i.item_stat IN (3, 4) THEN 1 END) AS stat3_cnt,
        COUNT(CASE WHEN i.item_stat = 4 THEN 1 END) AS stat4_cnt,
        COALESCE(SUM((p.prod_price - p.prod_sale) * i.item_cnt ), 0) AS tot_ord_price,
        COALESCE(SUM(
        CASE
        WHEN i.item_stat = 4 THEN (p.prod_price - p.prod_sale) * i.item_cnt
        END
        ), 0) AS tot_sell_price
        FROM member m
        LEFT JOIN mem_seller s ON m.mem_id = s.mem_id
        LEFT JOIN product p ON m.mem_id = p.mem_id
        LEFT JOIN order_item i ON i.prod_no = p.prod_no
        LEFT JOIN "order" o ON o.ord_no = i.ord_no
        GROUP BY s.corp_name, s.corp_reg_hp
        OFFSET #{offset} ROWS
        FETCH NEXT #{size} ROWS ONLY
    </select>

    <select id="sellerWithRange" resultType="kr.co.shoply.dto.MemSellerDTO">
        SELECT
        s.corp_name,
        s.corp_reg_hp,
        COUNT(DISTINCT i.ord_no) AS ord_cnt,
        COUNT(DISTINCT CASE WHEN o.ord_stat = 2 THEN i.ord_no END) AS ord_st_cnt,
        COUNT(CASE WHEN i.item_stat = 2 THEN 1 END) AS stat2_cnt,
        COUNT(CASE WHEN i.item_stat IN (3, 4) THEN 1 END) AS stat3_cnt,
        COUNT(CASE WHEN i.item_stat = 4 THEN 1 END) AS stat4_cnt,

        <!-- 주문합계 -->
        COALESCE(SUM(
        CASE WHEN
        <choose>
            <when test="range == 'day'">
                TRUNC(o.ord_date) = TRUNC(SYSDATE)
            </when>
            <when test="range == 'week'">
                o.ord_date BETWEEN TRUNC(SYSDATE) - 6 AND TRUNC(SYSDATE) + 1
            </when>
            <when test="range == 'month'">
                o.ord_date BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 0) AND LAST_DAY(SYSDATE)
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
        THEN (p.prod_price - p.prod_sale) * i.item_cnt
        END
        ), 0) AS tot_ord_price,

        <!-- 구매확정 매출합계 -->
        COALESCE(SUM(
        CASE WHEN
        i.item_stat = 4 AND
        <choose>
            <when test="range == 'day'">
                TRUNC(o.ord_date) = TRUNC(SYSDATE)
            </when>
            <when test="range == 'week'">
                o.ord_date BETWEEN TRUNC(SYSDATE) - 6 AND TRUNC(SYSDATE) + 1
            </when>
            <when test="range == 'month'">
                o.ord_date BETWEEN ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 0) AND LAST_DAY(SYSDATE)
            </when>
            <otherwise>
                1=1
            </otherwise>
        </choose>
        THEN (p.prod_price - p.prod_sale) * i.item_cnt
        END
        ), 0) AS tot_sell_price

        FROM member m
        JOIN mem_seller s ON m.mem_id = s.mem_id
        LEFT JOIN product p ON p.mem_id = m.mem_id
        LEFT JOIN order_item i ON i.prod_no = p.prod_no
        LEFT JOIN "order" o ON o.ord_no = i.ord_no
        GROUP BY s.corp_name, s.corp_reg_hp
        OFFSET #{pageRequestDTO.offset} ROWS
        FETCH NEXT #{pageRequestDTO.size} ROWS ONLY
    </select>



    <sql id="rangeWhere">
        <where>
            mem_level=2
            <if test="searchType != null and keyword != ''">
                <choose>
                    <when test="searchType == 'corp_name'">
                        AND corp_name LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'mem_name'">
                        AND mem_name LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'corp_reg_hp'">
                        AND corp_reg_hp LIKE '%' || #{keyword} || '%'
                    </when>
                    <when test="searchType == 'mem_hp'">
                        AND mem_hp LIKE '%' || #{keyword} || '%'
                    </when>

                </choose>
            </if>
        </where>
    </sql>


</mapper>